{% extends 'base.html.twig' %}

{% block title %}Login/Register



{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css?family=Montserrat:400,800');

        * {
            box-sizing: border-box;
        }

        body {
            background: #f6f5f7;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            font-family: 'Montserrat', sans-serif;
            height: 100vh;
            margin: -20px 0 50px;
        }

        h1 {
            font-weight: bold;
            margin: 0;
        }

        h2 {
            text-align: center;
        }

        p {
            font-size: 14px;
            font-weight: 100;
            line-height: 20px;
            letter-spacing: 0.5px;
            margin: 20px 0 30px;
        }

        span {
            font-size: 12px;
        }

        a {
            color: #333;
            font-size: 14px;
            text-decoration: none;
            margin: 15px 0;
        }

        button {
            border-radius: 20px;
            border: 1px solid #FF4B2B;
            background-color: #FF4B2B;
            color: #FFFFFF;
            font-size: 12px;
            font-weight: bold;
            padding: 12px 45px;
            letter-spacing: 1px;
            text-transform: uppercase;
            transition: transform 80ms ease-in;
            cursor: pointer;
        }

        button:active {
            transform: scale(0.95);
        }

        button:focus {
            outline: none;
        }

        button.ghost {
            background-color: transparent;
            border-color: #FFFFFF;
        }

        form {
            background-color: #FFFFFF;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            padding: 0 50px;
            height: 100%;
            text-align: center;
        }

        input {
            background-color: #eee;
            border: none;
            padding: 12px 15px;
            margin: 8px 0;
            width: 100%;
            font-family: 'Montserrat', sans-serif;
        }

        .container {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 14px 28px rgba(0,0,0,0.25),
            0 10px 10px rgba(0,0,0,0.22);
            position: relative;
            overflow: hidden;
            width: 1250px;
            max-width: 100%;
            min-height: 800px;
        }

        .form-container {
            position: absolute;
            top: 0;
            height: 100%;
            transition: all 0.6s ease-in-out;
        }

        .sign-in-container {
            left: 0;
            width: 50%;
            z-index: 2;
        }

        .container.right-panel-active .sign-in-container {
            transform: translateX(100%);
        }

        .sign-up-container {
            left: 0;
            width: 50%;
            opacity: 0;
            z-index: 1;
        }

        .container.right-panel-active .sign-up-container {
            transform: translateX(100%);
            opacity: 1;
            z-index: 5;
            animation: show 0.6s;
        }

        @keyframes show {
            0%, 49.99% {
                opacity: 0;
                z-index: 1;
            }

            50%, 100% {
                opacity: 1;
                z-index: 5;
            }
        }

        .overlay-container {
            position: absolute;
            top: 0;
            left: 50%;
            width: 50%;
            height: 100%;
            overflow: hidden;
            transition: transform 0.6s ease-in-out;
            z-index: 100;
        }

        .container.right-panel-active .overlay-container{
            transform: translateX(-100%);
        }

        .overlay {
            background: #FF416C;
            background: -webkit-linear-gradient(to right, #FF4B2B, #FF416C);
            background: linear-gradient(to right, #FF4B2B, #FF416C);
            background-repeat: no-repeat;
            background-size: cover;
            background-position: 0 0;
            color: #FFFFFF;
            position: relative;
            left: -100%;
            height: 100%;
            width: 200%;
            transform: translateX(0);
            transition: transform 0.6s ease-in-out;
        }

        .container.right-panel-active .overlay {
            transform: translateX(50%);
        }

        .overlay-panel {
            position: absolute;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            padding: 0 40px;
            text-align: center;
            top: 0;
            height: 100%;
            width: 50%;
            transform: translateX(0);
            transition: transform 0.6s ease-in-out;
        }

        .overlay-left {
            transform: translateX(-20%);
        }

        .container.right-panel-active .overlay-left {
            transform: translateX(0);
        }

        .overlay-right {
            right: 0;
            transform: translateX(0);
        }

        .container.right-panel-active .overlay-right {
            transform: translateX(20%);
        }

        .social-container {
            margin: 20px 0;
        }

        .social-container a {
            border: 1px solid #DDDDDD;
            border-radius: 50%;
            display: inline-flex;
            justify-content: center;
            align-items: center;
            margin: 0 5px;
            height: 40px;
            width: 40px;
        }

        .form-group {
            width: 100%;
        }

        .form-control {
            background-color: #e0e0e0;
            border: none;
            padding: 12px 15px;
            width: 100%;
            font-family: 'Montserrat', sans-serif;
        }

        .form-control:focus {
        }

        .form-group label {
        }

        .form-group input[type="file"] {
            padding: 10px;
            background: #f8f9fa;
            border: 1px dashed #ccc;
            border-radius: 4px;
        }

        footer {
            background-color: #222;
            color: #fff;
            font-size: 14px;
            bottom: 0;
            position: fixed;
            left: 0;
            right: 0;
            text-align: center;
            z-index: 999;
        }

        footer p {
            margin: 10px 0;
        }

        footer i {
            color: red;
        }

        footer a {
            color: #3c97bf;
            text-decoration: none;
        }
        *.invalid-feedback {
            color: #dc3545;
            font-size: 12px;
            width: 100%;
            text-align: left;
            margin-top: 0.25rem;


        }


        .is-invalid {
            border-color: #dc3545 !important;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }
        .alert-danger {
            color: #dc3545;
            font-size: 0.875em;
            margin-top: 0.25rem;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            background-color: rgba(220, 53, 69, 0.1);
        }
        .form-error {
            color: #d9534f; /* Couleur rouge pour l'erreur */
            font-size: 14px; /* Taille de police plus petite */
            font-weight: bold;
            margin-top: 5px;
            margin-bottom: 15px;
        }

        .form-error {
            background-color: rgba(255, 0, 0, 0.1); /* Fond rouge clair */
            border: 1px solid #d9534f; /* Bordure rouge */
            padding: 5px 10px;
            border-radius: 4px;
            margin-top: 5px;
        }

        /* Optionnel : une autre option pour rendre les erreurs plus visibles */
        .form-error-list {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }

        .form-error-list li {
            font-size: 13px;
            color: #e74c3c;
            margin: 5px 0;
        }
        /* Animation pour les messages flash */
        .flash-message {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 5px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            opacity: 0;
            transform: translateY(-20px);
            transition: opacity 0.3s ease, transform 0.3s ease;
            z-index: 1000;
        }

        .flash-message.show {
            opacity: 1;
            transform: translateY(0);
        }

        .flash-message.success {
            background-color: #4CAF50;
            color: white;
        }

        .flash-message.error {
            background-color: #F44336;
            color: white;
        }

    </style>
{% endblock %}

{% block body %}

    <div class="container" id="container">

        <div class="form-container sign-up-container">


            {{ form_start(form, {'attr': {'novalidate': 'novalidate'}}) }}
            <h1>Create Account</h1>

            <div class="social-container">
                <a href="#" class="social"><i class="fab fa-facebook-f"></i></a>
                <a href="#" class="social"><i class="fab fa-google-plus-g"></i></a>
                <a href="#" class="social"><i class="fab fa-linkedin-in"></i></a>
            </div>
            {# Champ Nom #}
            <div class="form-group">
                {{ form_widget(form.nom, {
                    'attr': {
                        'class': 'form-control',
                        'placeholder': 'Votre nom'
                    }
                }) }}
                <div class="invalid-feedback">
                    {{ form_errors(form.nom) }}
                </div>
            </div>

            {# Champ Prénom #}
            <div class="form-group">
                {{ form_widget(form.prenom, {
                    'attr': {
                        'class': 'form-control ' ~ (form.prenom.vars.valid ? '' : 'is-invalid'),
                        'placeholder': 'Surname'
                    }
                }) }}
                <div class="invalid-feedback">
                    {{ form_errors(form.prenom) }}
                </div>
            </div>

            {# Champ Email #}
            <div class="form-group">
                {{ form_widget(form.email, {
                    'attr': {
                        'class': 'form-control ' ~ (form.email.vars.valid ? '' : 'is-invalid'),
                        'placeholder': 'Email'
                    }
                }) }}
                <div class="invalid-feedback">
                    {{ form_errors(form.email) }}
                </div>
            </div>

            {# Champ Mot de passe #}
            <div class="form-group">
                {{ form_widget(form.mot_de_passe, {
                    'attr': {
                        'class': 'form-control ' ~ (form.mot_de_passe.vars.valid ? '' : 'is-invalid'),
                        'placeholder': 'Password'
                    }
                }) }}
                <div class="invalid-feedback">
                    {{ form_errors(form.mot_de_passe) }}
                </div>
            </div>

            {# Champ Téléphone #}
            <div class="form-group">
                {{ form_widget(form.tel, {
                    'attr': {
                        'class': 'form-control ' ~ (form.tel.vars.valid ? '' : 'is-invalid'),
                        'placeholder': 'Phone'
                    }
                }) }}
                <div class="invalid-feedback">
                    {{ form_errors(form.tel) }}
                </div>
            </div>

            {# Champ Localisation #}
            <div class="form-group">
                {{ form_widget(form.localisation, {
                    'attr': {
                        'class': 'form-control ' ~ (form.localisation.vars.valid ? '' : 'is-invalid'),
                        'placeholder': 'Location'
                    }
                }) }}
                <div class="invalid-feedback">
                    {{ form_errors(form.localisation) }}
                </div>
            </div>

            {# Champ Image #}
            <div class="form-group">
                {{ form_widget(form.image, {
                    'attr': {
                        'class': 'form-control ' ~ (form.image.vars.valid ? '' : 'is-invalid')
                    }
                }) }}
                <div class="invalid-feedback">
                    {{ form_errors(form.image) }}
                </div>
            </div>

            <button class="btn">{{ button_label|default('Save') }}</button>
            {{ form_end(form) }}
        </div>

        <div class="form-container sign-in-container">
            {{ form_start(form, {'attr': {'novalidate': 'novalidate'}}) }}
            {{ form_start(loginForm, {'attr': {'class': 'login-form'}}) }}

            <h1>Sign in</h1>
            
            <div class="social-container">
                <a href="#" class="social"><i class="fab fa-facebook-f"></i></a>
                <a href="#" class="social"><i class="fab fa-google-plus-g"></i></a>
                <a href="#" class="social"><i class="fab fa-linkedin-in"></i></a>
            </div>
            <span>or use your account</span>

            {{ form_row(loginForm.email, {
                'attr': {
                    'class': 'form-control',
                    'placeholder': 'Email'
                },
                'row_attr': {'class': 'form-group'}
            }) }}

            {{ form_row(loginForm.mot_de_passe, {
                'attr': {
                    'class': 'form-control',
                    'placeholder': 'Password'
                },
                'row_attr': {'class': 'form-group'}
            }) }}

            <a href="#">Forgot your password?</a>
            <button class="btn">{{ button_label|default('Save') }}</button>
            {{ form_end(loginForm) }}
        </div>

        <div class="overlay-container">
            <div class="overlay">
                <div class="overlay-panel overlay-left">
                    <h1>Welcome Back!</h1>
                    <p>To keep connected with us please login with your personal info</p>
                    <button class="ghost" id="signIn">Sign In</button>
                </div>
                <div class="overlay-panel overlay-right">
                    <h1>Hello, Friend!</h1>
                    <p>Enter your personal details and start journey with us</p>
                    <button class="ghost" id="signUp">Sign Up</button>
                </div>
            </div>
        </div>
    </div>

    <footer>
        <p>
            Created with <i class="fa fa-heart"></i> by
            <a target="_blank" href="https://florin-pop.com">Florin Pop</a>
            - Read how I created this and how you can join the challenge
            <a target="_blank" href="https://www.florin-pop.com/blog/2019/03/double-slider-sign-in-up-form/">here</a>.
        </p>
    </footer>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Références aux éléments DOM
            const signUpButton = document.getElementById('signUp');
            const signInButton = document.getElementById('signIn');
            const container = document.getElementById('container');

            // Vérification que les éléments existent
            if (!signUpButton || !signInButton || !container) {
                console.error('Un ou plusieurs éléments requis sont manquants dans le DOM');
                return;
            }

            // Gestionnaires d'événements
            function handleSignUpClick(e) {
                e.preventDefault();
                container.classList.add("right-panel-active");
                setTimeout(() => document.querySelector('.sign-up-container input')?.focus(), 600);
            }

            function handleSignInClick(e) {
                e.preventDefault();
                container.classList.remove("right-panel-active");
                setTimeout(() => document.querySelector('.sign-in-container input')?.focus(), 600);
            }

            // Ajout des écouteurs d'événements
            signUpButton.addEventListener('click', handleSignUpClick);
            signInButton.addEventListener('click', handleSignInClick);

            // Validation en temps réel
            function setupRealTimeValidation() {
                // Validation pour le formulaire d'inscription
                const signUpForm = document.querySelector('.sign-up-container form');
                if (signUpForm) {
                    setupFormValidation(signUpForm, {
                        'user_registration_form_nom': { required: true, minLength: 2 },
                        'user_registration_form_prenom': { required: true, minLength: 2 },
                        'user_registration_form_email': { required: true, email: true },
                        'user_registration_form_mot_de_passe': { required: true, minLength: 6 },
                        'user_registration_form_tel': { phone: true },
                        'user_registration_form_localisation': { required: false }
                    });
                }

                // Validation pour le formulaire de connexion
                const signInForm = document.querySelector('.sign-in-container form');
                if (signInForm) {
                    setupFormValidation(signInForm, {
                        'login_form_email': { required: true, email: true },
                        'login_form_mot_de_passe': { required: true }
                    });
                }
            }

            // Configuration de la validation pour un formulaire
            function setupFormValidation(form, fieldsConfig) {
                Object.keys(fieldsConfig).forEach(fieldName => {
                    const input = form.querySelector(`[name="${fieldName}"]`);
                    if (!input) return;

                    const config = fieldsConfig[fieldName];

                    // Validation lors de la perte de focus
                    input.addEventListener('blur', () => validateField(input, config));

                    // Validation en temps réel (pour certains champs)
                    if (fieldName.includes('email') || fieldName.includes('tel')) {
                        input.addEventListener('input', debounce(() => validateField(input, config), 500));
                    }
                });

                // Validation globale à la soumission
                form.addEventListener('submit', function(e) {
                    let isValid = true;
                    Object.keys(fieldsConfig).forEach(fieldName => {
                        const input = form.querySelector(`[name="${fieldName}"]`);
                        if (input && !validateField(input, fieldsConfig[fieldName])) {
                            isValid = false;
                        }
                    });

                    if (!isValid) {
                        e.preventDefault();
                        // Scroll vers le premier champ invalide
                        const firstInvalid = form.querySelector('.is-invalid');
                        if (firstInvalid) {
                            firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        }
                    }
                });
            }

            // Valide un champ selon sa configuration
            function validateField(input, config) {
                const value = input.value.trim();
                let isValid = true;
                let errorMessage = '';

                // Vérification des règles
                if (config.required && !value) {
                    isValid = false;
                    errorMessage = 'Ce champ est obligatoire';
                } else if (config.minLength && value.length < config.minLength) {
                    isValid = false;
                    errorMessage = `Doit contenir au moins ${config.minLength} caractères`;
                } else if (config.email && !isValidEmail(value)) {
                    isValid = false;
                    errorMessage = 'Veuillez entrer une adresse email valide';
                } else if (config.phone && value && !isValidPhone(value)) {
                    isValid = false;
                    errorMessage = 'Veuillez entrer un numéro de téléphone valide';
                }

                // Mise à jour de l'UI
                updateFieldValidationState(input, isValid, errorMessage);
                return isValid;
            }

            // Met à jour l'état visuel du champ
            function updateFieldValidationState(input, isValid, errorMessage) {
                const formGroup = input.closest('.form-group');
                if (!formGroup) return;

                // Supprime les anciens messages d'erreur
                const existingError = formGroup.querySelector('.real-time-error');
                if (existingError) existingError.remove();

                // Met à jour les classes
                input.classList.toggle('is-invalid', !isValid);
                input.classList.toggle('is-valid', isValid && input.value.trim() !== '');

                // Ajoute le message d'erreur si nécessaire
                if (!isValid) {
                    const errorElement = document.createElement('div');
                    errorElement.className = 'real-time-error invalid-feedback';
                    errorElement.textContent = errorMessage;
                    formGroup.appendChild(errorElement);
                }
            }

            // Fonctions de validation
            function isValidEmail(email) {
                return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
            }

            function isValidPhone(phone) {
                return /^[+]?[(]?[0-9]{3}[)]?[-\s.]?[0-9]{3}[-\s.]?[0-9]{4,6}$/.test(phone);
            }

            // Anti-rebond pour les événements de saisie
            function debounce(func, wait) {
                let timeout;
                return function() {
                    const context = this, args = arguments;
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(context, args), wait);
                };
            }

            // Initialisation
            setupRealTimeValidation();
            checkForErrors();
            highlightInvalidFields();

            // Vérifie les erreurs existantes
            function checkForErrors() {
                const signUpErrors = document.querySelectorAll('.sign-up-container .is-invalid');
                const signInErrors = document.querySelectorAll('.sign-in-container .is-invalid');

                if (signUpErrors.length > 0) {
                    container.classList.add("right-panel-active");
                } else if (signInErrors.length > 0) {
                    container.classList.remove("right-panel-active");
                }
            }

            // Animation pour les champs invalides
            function highlightInvalidFields() {
                document.querySelectorAll('.is-invalid').forEach(field => {
                    field.addEventListener('focus', () => field.classList.add('invalid-highlight'));
                    field.addEventListener('blur', () => field.classList.remove('invalid-highlight'));
                });
            }

        });
    </script>

    <style>
        .is-valid {
            border-color: #28a745 !important;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%2328a745' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }

        .invalid-highlight {
            animation: pulse 0.5s ease-in-out;
            box-shadow: 0 0 0 2px rgba(220, 53, 69, 0.5);
        }

        .real-time-error {
            display: block;
            margin-top: 0.25rem;
        }

        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(220, 53, 69, 0.5); }
            70% { box-shadow: 0 0 0 10px rgba(220, 53, 69, 0); }
            100% { box-shadow: 0 0 0 0 rgba(220, 53, 69, 0); }
        }
    </style>


{% endblock %}


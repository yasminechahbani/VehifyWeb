{% extends 'base.html.twig' %}
{% block title %}Statistiques sur les équipements{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
  .chart-container {
    display: flex;
    flex-direction: column;
    gap: 20px;
    margin: 0 auto 30px;  /* Center horizontally */
    max-width: 1000px;    /* Limit maximum width */
    padding: 0 20px;      /* Add some padding */
  }
  
  #main-chart {
    margin: 0 auto;       /* Center the chart */
    width: 100%;         /* Make it responsive */
    max-width: 900px;    /* Maximum width */
    height: 500px;
  }

  h1 {
    text-align: center;  /* Center the title */
    margin-bottom: 30px;
  }

  .chart-options {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    margin: 15px auto;   /* Center horizontally */
    padding: 15px;
    border-radius: 5px;
    background-color: #f5f5f5;
    justify-content: center; /* Center the options */
  }
  
  .chart-type-selector {
    padding: 8px 15px;
    border-radius: 4px;
    border: 1px solid #ddd;
  }
  
  .admin-controls {
    display: {% if is_granted('ROLE_ADMIN') %}flex{% else %}none{% endif %};
    flex-direction: column;
    gap: 15px;
    padding: 15px;
    margin-top: 20px;
    border: 1px solid #e0e0e0;
    border-radius: 5px;
    background-color: #f9f9f9;
  }
  
  .btn-export {
    padding: 8px 15px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .btn-export:hover {
    background-color: #45a049;
  }

  #detailed-stats {
    width: 100%;
    margin-top: 20px;
  }
</style>
{% endblock %}

{% block body %}
<h1>Statistiques sur les équipements</h1>

<div class="chart-options">
  <select id="chart-type" class="chart-type-selector">
    <option value="pie">Graphique circulaire</option>
    <option value="bar">Graphique à barres</option>
    <option value="column">Graphique à colonnes</option>
    <option value="donut">Graphique en anneau</option>
  </select>
  
  <select id="data-view" class="chart-type-selector">
    <option value="etat">Par état</option>
    <option value="categorie">Par catégorie</option>
    <option value="age">Par âge</option>
  </select>
  
  {% if is_granted('ROLE_ADMIN') %}
  <select id="data-filter" class="chart-type-selector">
    <option value="all">Tous les équipements</option>
    <option value="maintenance">En maintenance</option>
    <option value="critique">État critique</option>
    <option value="recent">Ajoutés récemment</option>
  </select>
  {% endif %}
</div>

<div class="chart-container">
  <div id="main-chart" style="width: 900px; height: 500px;"></div>
  
  {% if is_granted('ROLE_ADMIN') %}
  <div class="admin-controls">
    <h3>Contrôles administrateur</h3>
    <div>
      <button id="btn-export-pdf" class="btn-export">Exporter en PDF</button>
      <button id="btn-export-csv" class="btn-export">Exporter les données (CSV)</button>
      <button id="btn-refresh" class="btn-export">Actualiser les données</button>
    </div>
    <div id="detailed-stats"></div>
  </div>
  {% endif %}
</div>

<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">
  google.charts.load('current', {'packages':['corechart', 'table']});
  google.charts.setOnLoadCallback(initCharts);
  
  let mainChart;
  let statsTable;
  
  // Données de base
  const baseData = [
    ['État', 'Nombre'],
    {% for etat, nombre in etatsCount %}
      ['{{ etat }}', {{ nombre }}],
    {% endfor %}
  ];
  
  {% if is_granted('ROLE_ADMIN') %}
  // Données supplémentaires pour les administrateurs
  const categoriesData = [
    ['Catégorie', 'Nombre'],
    {% for categorie, nombre in categoriesCount|default([]) %}
      ['{{ categorie }}', {{ nombre }}],
    {% endfor %}
  ];
  
  const ageData = [
    ['Âge', 'Nombre'],
    ['< 1 an', {{ equipementAge.recent|default(10) }}],
    ['1-3 ans', {{ equipementAge.medium|default(25) }}],
    ['3-5 ans', {{ equipementAge.older|default(18) }}],
    ['> 5 ans', {{ equipementAge.oldest|default(15) }}]
  ];
  
  // Données détaillées pour le tableau administrateur
  const detailedData = [
    ['ID', 'Nom', 'État', 'Catégorie', 'Date d\'achat', 'Dernière maintenance'],
    {% for equip in detailedEquipments|default([]) %}
      ['{{ equip.id }}', '{{ equip.nom }}', '{{ equip.etat }}', '{{ equip.categorie }}', '{{ equip.dateAchat|date("d/m/Y") }}', '{{ equip.dateMaintenance|date("d/m/Y")|default("N/A") }}'],
    {% else %}
      // Données de démonstration si aucune n'est fournie
      ['EQ001', 'Équipement A', 'Fonctionnel', 'Informatique', '15/03/2023', '10/01/2024'],
      ['EQ002', 'Équipement B', 'En maintenance', 'Réseau', '22/06/2022', '05/03/2024'],
      ['EQ003', 'Équipement C', 'Défectueux', 'Serveur', '03/09/2020', '20/12/2023'],
      ['EQ004', 'Équipement D', 'Fonctionnel', 'Périphérique', '17/11/2021', '15/02/2024']
    {% endfor %}
  ];
  {% endif %}
  
  function initCharts() {
    drawMainChart('pie', baseData);
    
    {% if is_granted('ROLE_ADMIN') %}
    drawStatsTable(detailedData);
    
    // Configuration des événements pour les contrôles admin
    document.getElementById('btn-export-pdf').addEventListener('click', exportPDF);
    document.getElementById('btn-export-csv').addEventListener('click', exportCSV);
    document.getElementById('btn-refresh').addEventListener('click', refreshData);
    document.getElementById('data-filter').addEventListener('change', updateChartData);
    {% endif %}
    
    // Configuration des événements communs
    document.getElementById('chart-type').addEventListener('change', updateChartType);
    document.getElementById('data-view').addEventListener('change', updateChartData);
  }
  
  function drawMainChart(chartType, dataArray) {
    const data = google.visualization.arrayToDataTable(dataArray);
    
    let options = {
      title: getChartTitle(),
      is3D: chartType === 'pie' ? true : false,
      pieHole: chartType === 'donut' ? 0.4 : 0,
      legend: { position: 'right' },
      colors: ['#4285F4', '#EA4335', '#FBBC05', '#34A853', '#8B44CE', '#00ACC1', '#FF6D00'],
      animation: {
        duration: 1000,
        easing: 'out',
        startup: true
      }
    };
    
    // Déterminer quel type de graphique utiliser
    switch(chartType) {
      case 'bar':
        mainChart = new google.visualization.BarChart(document.getElementById('main-chart'));
        break;
      case 'column':
        mainChart = new google.visualization.ColumnChart(document.getElementById('main-chart'));
        break;
      case 'donut':
        mainChart = new google.visualization.PieChart(document.getElementById('main-chart'));
        break;
      case 'pie':
      default:
        mainChart = new google.visualization.PieChart(document.getElementById('main-chart'));
    }
    
    mainChart.draw(data, options);
  }
  
  {% if is_granted('ROLE_ADMIN') %}
  function drawStatsTable(dataArray) {
    const data = google.visualization.arrayToDataTable(dataArray);
    
    const options = {
      showRowNumber: true,
      width: '100%',
      height: '100%',
      page: 'enable',
      pageSize: 5
    };
    
    statsTable = new google.visualization.Table(document.getElementById('detailed-stats'));
    statsTable.draw(data, options);
  }
  
  function exportPDF() {
    alert('Le PDF contenant les statistiques est en cours de génération.');
    // Ici, vous ajouteriez la logique d'exportation PDF côté serveur
  }
  
  function exportCSV() {
    alert('Les données vont être téléchargées au format CSV.');
    // Ici, vous ajouteriez la logique d'exportation CSV
  }
  
  function refreshData() {
    alert('Actualisation des données en cours...');
    // Ici, vous feriez une requête AJAX pour rafraîchir les données
    // Puis, vous appelleriez drawMainChart et drawStatsTable avec les nouvelles données
  }
  {% endif %}
  
  function updateChartType() {
    const chartType = document.getElementById('chart-type').value;
    const dataView = document.getElementById('data-view').value;
    
    let dataToUse;
    {% if is_granted('ROLE_ADMIN') %}
    switch(dataView) {
      case 'categorie':
        dataToUse = categoriesData;
        break;
      case 'age':
        dataToUse = ageData;
        break;
      case 'etat':
      default:
        dataToUse = baseData;
    }
    {% else %}
    dataToUse = baseData;
    {% endif %}
    
    drawMainChart(chartType, dataToUse);
  }
  
  function updateChartData() {
    const chartType = document.getElementById('chart-type').value;
    const dataView = document.getElementById('data-view').value;
    
    let dataToUse;
    {% if is_granted('ROLE_ADMIN') %}
    switch(dataView) {
      case 'categorie':
        dataToUse = categoriesData;
        break;
      case 'age':
        dataToUse = ageData;
        break;
      case 'etat':
      default:
        dataToUse = baseData;
    }
    
    // Appliquer des filtres supplémentaires si sélectionnés
    const dataFilter = document.getElementById('data-filter').value;
    if (dataFilter !== 'all') {
      // Dans une implémentation réelle, vous feriez une requête AJAX pour obtenir des données filtrées
      // Pour cet exemple, nous simulons simplement le filtrage
      console.log('Filtre appliqué: ' + dataFilter);
    }
    {% else %}
    dataToUse = baseData;
    {% endif %}
    
    drawMainChart(chartType, dataToUse);
  }
  
  function getChartTitle() {
    const dataView = document.getElementById('data-view').value;
    
    switch(dataView) {
      case 'categorie':
        return 'Équipements par catégorie';
      case 'age':
        return 'Équipements par âge';
      case 'etat':
      default:
        return 'État des équipements';
    }
  }
</script>
{% endblock %}
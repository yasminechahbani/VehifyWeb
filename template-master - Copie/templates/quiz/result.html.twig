{% extends 'basePermis.html.twig' %}

{% block title %}Quiz Results{% endblock %}

{% block body %}
    <div class="container py-5 result-container">
        <div class="card shadow">
            <div class="card-body text-center">
                <h1 class="mb-4">Quiz Results</h1>

                <div class="result-box p-4 mb-4">
                    <h2 class="mb-3">Your Score</h2>
                    <h3 class="display-4">{{ score }}/{{ total }}</h3>

                    {% if quiz.statut == 'Passed' %}
                        <div class="alert alert-success mt-3">
                            <strong>Congratulations!</strong> You passed the quiz.
                        </div>

                        {% if score >= 7 %}
                            <div class="permis-generation mt-4">
                                <h4 class="mb-3">Driver's License Eligibility</h4>
                                <p>You've qualified for a driver's license!</p>
                            </div>
                        {% endif %}

                    {% else %}
                        <div class="alert alert-danger mt-3">
                            <strong>Sorry!</strong> You failed the quiz. Please try again.
                        </div>
                    {% endif %}
                </div>

                {# Rating section #}
                <div class="rating-section mt-4">
                    <h4>Rate This Quiz</h4>
                    <p>Your feedback helps us improve!</p>
                    
                    {% for message in app.flashes('success') %}
                        <div class="alert alert-success mb-3">
                            {{ message }}
                        </div>
                    {% endfor %}
                    
                    {% for message in app.flashes('error') %}
                        <div class="alert alert-danger mb-3">
                            {{ message }}
                        </div>
                    {% endfor %}

{{ form_start(ratingForm, {'attr': {'id': 'ratingForm', 'class': 'rating-form'}}) }}
                        <div class="rating-stars mb-4">
                            {% for child in ratingForm.rating %}
                                <div class="star-option">
                                    {{ form_widget(child, {'attr': {'class': 'star-radio'}}) }}
                                    <label for="{{ child.vars.id }}" class="star-label">
                                        <i class="fas fa-star"></i>
                                    </label>
                                </div>
                            {% endfor %}
                        </div>
                        <button type="submit" class="btn btn-primary submit-rating" id="submitRating" disabled>
                            Submit Rating
                        </button>
                    {{ form_end(ratingForm) }}
                </div>

                <div class="mt-5 action-buttons">
                    <a href="{{ path('app_quiz_generate') }}" class="btn btn-outline-primary me-2">
                        <i class="fas fa-redo me-2"></i> Take Another Quiz
                    </a>
                    <a href="{{ path('app_home') }}" class="btn btn-outline-secondary">
                        <i class="fas fa-home me-2"></i> Return Home
                    </a>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .result-container {
            max-width: 800px;
            margin: 0 auto;
        }
        .result-box {
            background-color: #f8f9fa;
            border-radius: 8px;
        }
        .rating-stars {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-bottom: 20px;
        }
        .star-radio {
            position: absolute;
            opacity: 0;
            width: 0;
            height: 0;
        }
        .star-label {
            cursor: pointer;
            font-size: 2.5rem;
            color: #e0e0e0;
            transition: all 0.2s ease;
        }
        .star-label:hover,
        .star-radio:checked + .star-label,
        .star-label:hover ~ .star-label {
            color: #ffc107;
        }
        .submit-rating {
            padding: 10px 30px;
            font-size: 1.1rem;
            transition: all 0.3s ease;
        }
        .submit-rating:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        .submit-rating:not(:disabled):hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .action-buttons {
            display: flex;
            justify-content: center;
            gap: 15px;
        }
        @media (max-width: 576px) {
            .rating-stars {
                gap: 10px;
            }
            .star-label {
                font-size: 2rem;
            }
            .action-buttons {
                flex-direction: column;
                gap: 10px;
            }
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('ratingForm');
            const stars = document.querySelectorAll('.star-label');
            const submitBtn = document.getElementById('submitRating');
            const radioInputs = document.querySelectorAll('.star-radio');

            // Initialize form state
            updateSubmitButton();

            // Star rating interaction
            stars.forEach(star => {
                star.addEventListener('click', function() {
                    // The corresponding radio input is the previous sibling of the label's parent
                    const radioId = this.getAttribute('for');
                    const radioInput = document.getElementById(radioId);
                    
                    // Update UI
                    updateStarColors(radioInput.value);
                    updateSubmitButton();
                });

                star.addEventListener('mouseover', function() {
                    const starValue = this.closest('.star-option').querySelector('.star-radio').value;
                    highlightStars(starValue);
                });

                star.addEventListener('mouseout', function() {
                    const checkedInput = document.querySelector('.star-radio:checked');
                    updateStarColors(checkedInput ? checkedInput.value : 0);
                });
            });

            // Form submission
            form.addEventListener('submit', function(e) {
                if (!document.querySelector('.star-radio:checked')) {
                    e.preventDefault();
                    alert('Please select a rating before submitting');
                }
            });

            // Helper functions
            function updateStarColors(rating) {
                stars.forEach(star => {
                    const starValue = star.closest('.star-option').querySelector('.star-radio').value;
                    if (starValue <= rating) {
                        star.style.color = '#ffc107';
                    } else {
                        star.style.color = '#e0e0e0';
                    }
                });
            }

            function highlightStars(rating) {
                stars.forEach(star => {
                    const starValue = star.closest('.star-option').querySelector('.star-radio').value;
                    star.style.color = starValue <= rating ? '#ffc107' : '#e0e0e0';
                });
            }

            function updateSubmitButton() {
                const isChecked = document.querySelector('.star-radio:checked') !== null;
                submitBtn.disabled = !isChecked;
            }
        });
    </script>
{% endblock %}